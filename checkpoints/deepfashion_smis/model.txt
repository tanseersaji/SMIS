SmisModel(
  (netG): DeepFashionGenerator(
    (fc): Conv2d(64, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
    (head_0): SPADEV2ResnetBlock(
      (conv_0): Conv2d(2560, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      (conv_1): Conv2d(2560, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      (norm_0): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      )
      (norm_1): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      )
    )
    (G_middle_0): SPADEV2ResnetBlock(
      (conv_0): Conv2d(2560, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      (conv_1): Conv2d(2560, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      (norm_0): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      )
      (norm_1): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
      )
    )
    (G_middle_1): SPADEV2ResnetBlock(
      (conv_0): Conv2d(2560, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      (conv_1): Conv2d(2560, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      (norm_0): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      )
      (norm_1): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      )
    )
    (up_0): SPADEV2ResnetBlock(
      (conv_0): Conv2d(2560, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      (conv_1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      (conv_s): Conv2d(2560, 1280, kernel_size=(1, 1), stride=(1, 1), groups=4, bias=False)
      (norm_0): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      )
      (norm_1): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
        (mlp_beta): Conv2d(128, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      )
      (norm_s): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(2560, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
        (mlp_beta): Conv2d(128, 2560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4)
      )
    )
    (up_1): SPADEV2ResnetBlock(
      (conv_0): Conv2d(1280, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      (conv_1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      (conv_s): Conv2d(1280, 640, kernel_size=(1, 1), stride=(1, 1), groups=2, bias=False)
      (norm_0): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
        (mlp_beta): Conv2d(128, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      )
      (norm_1): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
        (mlp_beta): Conv2d(128, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      )
      (norm_s): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
        (mlp_beta): Conv2d(128, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      )
    )
    (up_2): SPADEV2ResnetBlock(
      (conv_0): Conv2d(640, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      (conv_1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      (conv_s): Conv2d(640, 320, kernel_size=(1, 1), stride=(1, 1), groups=2, bias=False)
      (norm_0): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
        (mlp_beta): Conv2d(128, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      )
      (norm_1): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
        (mlp_beta): Conv2d(128, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      )
      (norm_s): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(640, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
        (mlp_beta): Conv2d(128, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2)
      )
    )
    (up_3): SPADEV2ResnetBlock(
      (conv_0): Conv2d(320, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv_s): Conv2d(320, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (norm_0): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_1): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(160, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm_s): GROUP_SPADE(
        (param_free_norm): SynchronizedBatchNorm2d(320, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        (mlp_shared): Sequential(
          (0): Conv2d(8, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU()
        )
        (mlp_gamma): Conv2d(128, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mlp_beta): Conv2d(128, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (conv_img): Conv2d(160, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (up): Upsample(scale_factor=2.0, mode=nearest)
  )
  (netD): MultiscaleDiscriminator(
    (discriminator_0): NLayerDiscriminator(
      (model0): Sequential(
        (0): Conv2d(11, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model1): Sequential(
        (0): Sequential(
          (0): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
          (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model2): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
          (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model3): Sequential(
        (0): Sequential(
          (0): Conv2d(256, 512, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2), bias=False)
          (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model4): Sequential(
        (0): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2))
      )
    )
    (discriminator_1): NLayerDiscriminator(
      (model0): Sequential(
        (0): Conv2d(11, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model1): Sequential(
        (0): Sequential(
          (0): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
          (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model2): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
          (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model3): Sequential(
        (0): Sequential(
          (0): Conv2d(256, 512, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2), bias=False)
          (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        )
        (1): LeakyReLU(negative_slope=0.2)
      )
      (model4): Sequential(
        (0): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2))
      )
    )
  )
  (netE): ConvEncoder(
    (layer1): Sequential(
      (0): Conv2d(24, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=8, bias=False)
      (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (layer2): Sequential(
      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=8, bias=False)
      (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (layer3): Sequential(
      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=8, bias=False)
      (1): InstanceNorm2d(1024, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (layer4): Sequential(
      (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=8, bias=False)
      (1): InstanceNorm2d(2048, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (layer5): Sequential(
      (0): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=8, bias=False)
      (1): InstanceNorm2d(2048, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (layer6): Sequential(
      (0): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=8, bias=False)
      (1): InstanceNorm2d(2048, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    )
    (fc_mu): Conv2d(2048, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
    (fc_var): Conv2d(2048, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
    (actvn): LeakyReLU(negative_slope=0.2)
  )
  (criterionGAN): GANLoss()
  (criterionFeat): L1Loss()
  (criterionVGG): VGGLoss(
    (vgg): VGG19(
      (slice1): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
      )
      (slice2): Sequential(
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
      )
      (slice3): Sequential(
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
      )
      (slice4): Sequential(
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (17): ReLU(inplace=True)
        (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
      )
      (slice5): Sequential(
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (24): ReLU(inplace=True)
        (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (26): ReLU(inplace=True)
        (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
      )
    )
    (criterion): L1Loss()
  )
  (KLDLoss): KLDLoss()
)